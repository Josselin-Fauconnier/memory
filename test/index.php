<?php
/**
 * Fichier de test et d√©bogage pour le jeu Memory
 * Usage: php debug_test.php ou via navigateur
 */

require_once 'database.php';
require_once 'Card.php';
require_once 'Game.php';

class DebugTester 
{
    private array $tests = [];
    private int $passed = 0;
    private int $failed = 0;

    public function __construct() 
    {
        echo "<h1>üîç Tests de d√©bogage Memory Game</h1>\n";
        echo "<style>
            .success { color: green; }
            .error { color: red; }
            .info { color: blue; }
            .warning { color: orange; }
            pre { background: #f5f5f5; padding: 10px; border-radius: 5px; }
        </style>\n";
    }

    /**
     * Teste la connexion √† la base de donn√©es
     */
    public function testDatabaseConnection(): void 
    {
        $this->section("üóÑÔ∏è Test Connexion Base de Donn√©es");
        
        try {
            $connected = Database::testConnection();
            if ($connected) {
                $this->success("‚úÖ Connexion BDD r√©ussie");
                
                $pdo = Database::getInstance();
                $tables = $pdo->query("SHOW TABLES")->fetchAll(PDO::FETCH_COLUMN);
                $this->info("üìã Tables trouv√©es: " . implode(', ', $tables));
                
            } else {
                $this->error("‚ùå √âchec connexion BDD");
            }
        } catch (Exception $e) {
            $this->error("üí• Erreur BDD: " . $e->getMessage());
        }
    }

    /**
     * Teste la cr√©ation et manipulation des cartes
     */
    public function testCardClass(): void 
    {
        $this->section("üÉè Test Classe Card");
        
        try {
            // Test cr√©ation carte valide
            $card = new Card(1, 'roi-david.svg');
            $this->success("‚úÖ Cr√©ation carte valide");
            
            // Test getters de base
            $this->assertEquals(1, $card->getId(), "ID carte");
            $this->assertEquals('roi-david.svg', $card->getImage(), "Image carte");
            $this->assertEquals(false, $card->isFlipped(), "√âtat initial carte");
            
            // Test flip
            $result = $card->flip();
            $this->assertTrue($result, "Flip carte");
            $this->assertTrue($card->isFlipped(), "√âtat apr√®s flip");
            
            // Test match
            $card2 = new Card(2, 'roi-david.svg');
            $this->assertTrue($card->matches($card2), "Correspondance cartes");
            
            // Test images disponibles
            $images = Card::getAvailableImages();
            $this->assertTrue(count($images) >= 3, "Nombre d'images suffisant");
            $this->info("üñºÔ∏è Images disponibles: " . count($images));
            
        } catch (Exception $e) {
            $this->error("üí• Erreur Card: " . $e->getMessage());
        }
    }

    /**
     * Teste la logique du jeu
     */
    public function testGameClass(): void 
    {
        $this->section("üéÆ Test Classe Game");
        
        try {
            // Test cr√©ation jeu facile
            $game = new Game('facile');
            $this->success("‚úÖ Cr√©ation jeu facile");
            
            $this->assertEquals('facile', $game->getDifficulty(), "Difficult√©");
            $this->assertEquals(3, $game->getTotalPairs(), "Nombre de paires");
            $this->assertEquals(0, $game->getMoves(), "Coups initiaux");
            $this->assertFalse($game->isCompleted(), "Jeu non termin√©");
            
            // Test cartes g√©n√©r√©es
            $cards = $game->getCards();
            $this->assertEquals(6, count($cards), "Nombre total de cartes");
            
            // V√©rification des paires
            $imageCount = [];
            foreach ($cards as $card) {
                $image = $card->getImage();
                $imageCount[$image] = ($imageCount[$image] ?? 0) + 1;
            }
            
            $validPairs = true;
            foreach ($imageCount as $count) {
                if ($count !== 2) {
                    $validPairs = false;
                    break;
                }
            }
            $this->assertTrue($validPairs, "Validation des paires");
            
            // Test flip invalide
            $result = $game->flipCard(-1);
            $this->assertFalse($result['success'], "Position n√©gative rejet√©e");
            
            $result = $game->flipCard(99);
            $this->assertFalse($result['success'], "Position invalide rejet√©e");
            
        } catch (Exception $e) {
            $this->error("üí• Erreur Game: " . $e->getMessage());
        }
    }

    /**
     * Teste la simulation d'une partie compl√®te
     */
    public function testGameSimulation(): void 
    {
        $this->section("üéØ Simulation Partie Compl√®te");
        
        try {
            $game = new Game('facile');
            $cards = $game->getCards();
            
            // Cr√©er un mapping position -> image pour trouver les paires
            $imagePositions = [];
            foreach ($cards as $position => $card) {
                $image = $card->getImage();
                if (!isset($imagePositions[$image])) {
                    $imagePositions[$image] = [];
                }
                $imagePositions[$image][] = $position;
            }
            
            $moveCount = 0;
            $maxMoves = 50; // Protection contre boucle infinie
            
            // Jouer automatiquement
            foreach ($imagePositions as $image => $positions) {
                if ($moveCount >= $maxMoves) break;
                if (count($positions) === 2) {
                    // Flip premi√®re carte de la paire
                    $result1 = $game->flipCard($positions[0]);
                    $moveCount++;
                    
                    if ($result1['success']) {
                        // Flip deuxi√®me carte de la paire
                        $result2 = $game->flipCard($positions[1]);
                        $moveCount++;
                        
                        if ($result2['success'] && isset($result2['match']) && $result2['match']) {
                            $this->info("‚ú® Paire trouv√©e: $image");
                        }
                    }
                }
            }
            
            if ($game->isCompleted()) {
                $this->success("üéâ Partie termin√©e automatiquement!");
                $stats = $game->getFinalStats();
                $this->info("üìä Score final: " . $stats['score']);
                $this->info("üî¢ Coups jou√©s: " . $stats['moves']);
                $this->info("‚è±Ô∏è Temps: " . $stats['time_formatted']);
            } else {
                $this->warning("‚ö†Ô∏è Partie non termin√©e en $moveCount coups");
            }
            
        } catch (Exception $e) {
            $this->error("üí• Erreur simulation: " . $e->getMessage());
        }
    }

    /**
     * Teste la persistance en session
     */
    public function testSessionPersistence(): void 
    {
        $this->section("üíæ Test Persistance Session");
        
        try {
            $game = new Game('moyen');
            
            // Test conversion vers array
            $sessionData = $game->toSessionArray();
            $this->assertTrue(is_array($sessionData), "Conversion vers array");
            $this->assertTrue(isset($sessionData['difficulty']), "Difficult√© sauv√©e");
            
            // Test restauration depuis array
            $restoredGame = Game::fromSessionArray($sessionData);
            $this->assertEquals($game->getDifficulty(), $restoredGame->getDifficulty(), "Difficult√© restaur√©e");
            $this->assertEquals($game->getTotalPairs(), $restoredGame->getTotalPairs(), "Paires restaur√©es");
            
            $this->success("‚úÖ Persistance session OK");
            
        } catch (Exception $e) {
            $this->error("üí• Erreur session: " . $e->getMessage());
        }
    }

    /**
     * Affiche les informations syst√®me
     */
    public function showSystemInfo(): void 
    {
        $this->section("üíª Informations Syst√®me");
        
        $this->info("üêò Version PHP: " . PHP_VERSION);
        $this->info("üß† M√©moire utilis√©e: " . $this->formatBytes(memory_get_usage(true)));
        $this->info("üìà Pic m√©moire: " . $this->formatBytes(memory_get_peak_usage(true)));
        
        $extensions = ['pdo', 'pdo_mysql', 'session'];
        foreach ($extensions as $ext) {
            if (extension_loaded($ext)) {
                $this->success("‚úÖ Extension $ext charg√©e");
            } else {
                $this->error("‚ùå Extension $ext manquante");
            }
        }
    }

    /**
     * Lance tous les tests
     */
    public function runAllTests(): void 
    {
        $startTime = microtime(true);
        
        $this->testDatabaseConnection();
        $this->testCardClass();
        $this->testGameClass();
        $this->testGameSimulation();
        $this->testSessionPersistence();
        $this->showSystemInfo();
        
        $endTime = microtime(true);
        $executionTime = round(($endTime - $startTime) * 1000, 2);
        
        $this->section("üìã R√©sum√© des Tests");
        echo "<div class='success'>‚úÖ Tests r√©ussis: {$this->passed}</div>\n";
        echo "<div class='error'>‚ùå Tests √©chou√©s: {$this->failed}</div>\n";
        echo "<div class='info'>‚è±Ô∏è Temps d'ex√©cution: {$executionTime}ms</div>\n";
        
        if ($this->failed === 0) {
            echo "<div class='success'><h2>üéâ Tous les tests sont pass√©s !</h2></div>\n";
        } else {
            echo "<div class='error'><h2>‚ö†Ô∏è Des tests ont √©chou√©, v√©rifiez votre code</h2></div>\n";
        }
    }

    // M√©thodes utilitaires
    private function section(string $title): void 
    {
        echo "\n<h2>$title</h2>\n";
    }

    private function success(string $message): void 
    {
        echo "<div class='success'>$message</div>\n";
        $this->passed++;
    }

    private function error(string $message): void 
    {
        echo "<div class='error'>$message</div>\n";
        $this->failed++;
    }

    private function info(string $message): void 
    {
        echo "<div class='info'>$message</div>\n";
    }

    private function warning(string $message): void 
    {
        echo "<div class='warning'>$message</div>\n";
    }

    private function assertEquals($expected, $actual, string $description): void 
    {
        if ($expected === $actual) {
            $this->success("‚úÖ $description: $actual");
        } else {
            $this->error("‚ùå $description: attendu '$expected', obtenu '$actual'");
        }
    }

    private function assertTrue($condition, string $description): void 
    {
        if ($condition) {
            $this->success("‚úÖ $description");
        } else {
            $this->error("‚ùå $description: condition false");
        }
    }

    private function assertFalse($condition, string $description): void 
    {
        if (!$condition) {
            $this->success("‚úÖ $description");
        } else {
            $this->error("‚ùå $description: condition true");
        }
    }

    private function formatBytes(int $bytes): string 
    {
        $units = ['B', 'KB', 'MB', 'GB'];
        $bytes = max($bytes, 0);
        $pow = floor(($bytes ? log($bytes) : 0) / log(1024));
        $pow = min($pow, count($units) - 1);
        $bytes /= pow(1024, $pow);
        
        return round($bytes, 2) . ' ' . $units[$pow];
    }
}

// Ex√©cution des tests
if (php_sapi_name() !== 'cli') {
    echo "<!DOCTYPE html><html><head><meta charset='UTF-8'><title>Debug Memory Game</title></head><body>";
}

try {
    $tester = new DebugTester();
    $tester->runAllTests();
} catch (Exception $e) {
    echo "<div style='color: red;'>üí• Erreur fatale: " . $e->getMessage() . "</div>";
}

if (php_sapi_name() !== 'cli') {
    echo "</body></html>";
}
?>